{"version":3,"sources":["components/Header.js","components/ZoomableSVG.js","components/JapanMap.js","components/Axis.js","components/OverallGraph.js","components/IndividualGraph.js","components/Main.js","components/Footer.js","App.js","index.js"],"names":["Header","className","ZoomableSVG","children","svgRef","width","height","useRef","useState","k","setK","x","setX","y","setY","useEffect","zoom","d3","on","event","transform","scaleExtent","current","call","ref","viewBox","JapanMap","currentArea","japanPath","setJapanPath","area","setArea","json","setJson","targetPoint","setTargetPoint","projection","center","translate","scale","a","fetch","res","data","topojson","objects","features","path","map","item","push","areaCode","properties","N03_007","target","JSON","parse","stringify","strArea","String","id","slice","length","console","log","filter","N03_003","centerPoint","style","marginLeft","marginRight","i","d","stroke","strokeWidth","strokeOpacity","fill","cx","cy","r","VerricalAxis","graphWidth","graphHeight","location","label","strokeColor","range","y1","y2","deviceWidth","window","innerWidth","x1","x2","textAnchor","dominantBaseline","fontSize","ticks","HorizontalAxis","setData","graphType","optionData","tickCount","clickYearHandler","e","currentTarget","dataset","name","onClick","OverallGraph","setYear","colorScale","population","setPopulation","price","setPrice","res_popu","data_popu","res_price","data_price","margin","contentWidth","contentHeight","svgWidth","svgHeight","xScaleYear","domain","yScalePopulation","yScalePrice","preData","IndividualGraph","year","detailData","setDetailData","ADYear","resYear","datum","xScaleAreaName","Object","keys","Main","marginTop","Footer","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.0c2d4323.chunk.js","sourcesContent":["const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"hero is-small is-success\">\r\n        <div className=\"hero-body\">\r\n          <p className=\"title\">furu-vis</p>\r\n          <p className=\"subtitle\">furu-vis</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nfunction ZoomableSVG({ children, width, height }) {\r\n  const svgRef = useRef();\r\n  const [k, setK] = useState(1);\r\n  const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n  useEffect(() => {\r\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\r\n      const { x, y, k } = event.transform;\r\n      setK(k);\r\n      setX(x);\r\n      setY(y);\r\n    });\r\n    zoom.scaleExtent([0.5, 2]);\r\n    d3.select(svgRef.current).call(zoom);\r\n  }, []);\r\n\r\n  return (\r\n    <svg ref={svgRef} viewBox=\"-50 0 770 325\" width=\"550\" height=\"600\">\r\n      <g transform={`translate(${x}, ${y})scale(${k})`}>{children}</g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default ZoomableSVG;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ZoomableSVG from \"./ZoomableSVG\";\r\n\r\nconst JapanMap = ({ currentArea }) => {\r\n  const [japanPath, setJapanPath] = useState([]);\r\n  const [area, setArea] = useState(null);\r\n  const [json, setJson] = useState(null);\r\n  const [targetPoint, setTargetPoint] = useState([]);\r\n  const svgWidth = 200;\r\n  const svgHeight = 500;\r\n  const width = 630;\r\n  const height = 250;\r\n  const scale = 30000 * 0.7 * 0.1;\r\n  const east = 138.915833,\r\n    west = 139.796111,\r\n    north = 35.672778,\r\n    south = 35.128889;\r\n\r\n  const projection = d3\r\n    .geoMercator()\r\n    .center([(west + east) / 2 - 0.5, (north + south) / 2 + 1.8])\r\n    .translate([width / 2, height - 60])\r\n    .scale(scale);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await fetch(`./data/japan_simplify.topojson`);\r\n\r\n      const data = await res.json();\r\n      const features = await topojson.feature(\r\n        data,\r\n        data.objects[\"N03-21_210101-N03-21_210101\"]\r\n      );\r\n\r\n      const path = d3.geoPath().projection(projection);\r\n      const japanPath = [];\r\n      features.features.map((item) => {\r\n        japanPath.push({\r\n          path: path(item),\r\n          areaCode: item.properties.N03_007,\r\n        });\r\n      });\r\n\r\n      setJapanPath(japanPath);\r\n      setJson(features);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (json) {\r\n      const target = JSON.parse(JSON.stringify(json));\r\n      const strArea = String(currentArea.id).slice(0, -1);\r\n      target.features.length = 0;\r\n      console.log(currentArea);\r\n      target.features = json.features.filter((item) => {\r\n        if (currentArea.area === item.properties.N03_003) {\r\n          return true;\r\n        } else if (String(item.properties.N03_007) === strArea) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      console.log(\"areaが更新されました\");\r\n      console.log(target);\r\n      const centerPoint = projection(d3.geoCentroid(target));\r\n      setTargetPoint(centerPoint);\r\n      setArea(currentArea);\r\n    }\r\n  }, [currentArea]);\r\n\r\n  if (!japanPath.length) {\r\n    return (\r\n      <div className=\"column is-5\">\r\n        <div className=\"box\">\r\n          <p>loading</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"column is-5\"\r\n      style={{ marginLeft: \"20px\", marginRight: \"10px\" }}\r\n    >\r\n      <div className=\"box\">\r\n        {/* <svg viewBox=\"-50 0 770 325\" width=\"500\" height=\"550\"> */}\r\n        <ZoomableSVG width={svgWidth} height={svgHeight}>\r\n          <g>\r\n            {japanPath.map((item, i) => (\r\n              <path\r\n                key={i}\r\n                d={item.path}\r\n                stroke=\"black\"\r\n                strokeWidth=\"0.8\"\r\n                strokeOpacity=\"0.5\"\r\n                style={{\r\n                  fill: area == item.areaCode ? \"red\" : \"white\",\r\n                }}\r\n              />\r\n            ))}\r\n          </g>\r\n          {targetPoint.length > 0 ? (\r\n            <g>\r\n              <circle\r\n                cx={targetPoint[0]}\r\n                cy={targetPoint[1]}\r\n                r=\"15\"\r\n                strokeWidth=\"4\"\r\n                fill=\"rgba(255,0,0,0)\"\r\n                stroke=\"red\"\r\n              ></circle>\r\n            </g>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ZoomableSVG>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default JapanMap;\r\n","export const VerricalAxis = ({\r\n  scale,\r\n  graphWidth,\r\n  graphHeight,\r\n  location,\r\n  label,\r\n}) => {\r\n  const strokeColor = \"#888\";\r\n  const x = location === \"left\" ? 0 : graphWidth + 40;\r\n  const [y1, y2] = scale.range();\r\n  const deviceWidth = window.innerWidth;\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(-60, ${graphHeight / 2}) rotate(-90)`}>\r\n          <text\r\n            x={x}\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize={deviceWidth > 768 ? \"15\" : \"12\"}\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${scale(y)})`}>\r\n              <line\r\n                x1=\"0\"\r\n                y1=\"0\"\r\n                x2={location === \"left\" ? 5 : -5}\r\n                y2=\"0\"\r\n                stroke={strokeColor}\r\n              ></line>\r\n              <text\r\n                x={location === \"left\" ? -8 : 42}\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {location === \"left\" ? y : y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\nexport const HorizontalAxis = ({\r\n  scale,\r\n  graphWidth,\r\n  graphHeight,\r\n  label,\r\n  setData,\r\n  graphType,\r\n  optionData,\r\n}) => {\r\n  const strokeColor = \"#888\";\r\n  const y = graphHeight;\r\n  const tickCount = graphType === \"year\" ? 10 : 20;\r\n  const [x1, x2] = scale.range();\r\n  const clickYearHandler = (e) => {\r\n    if (graphType === \"year\") {\r\n      setData(e.currentTarget.dataset.id);\r\n    } else {\r\n      setData({\r\n        id: e.currentTarget.dataset.id,\r\n        area: e.currentTarget.dataset.name,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 40} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g transform={`translate(${graphWidth / 2}, ${y + 40})`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks(tickCount).map((x, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${scale(x) + 20}, 0)`}>\r\n              {/* <line\r\n                x1=\"0\"\r\n                y1={graphHeight}\r\n                x2=\"0\"\r\n                y2={graphHeight - 10}\r\n                stroke={strokeColor}\r\n              ></line> */}\r\n              <text\r\n                x=\"0\"\r\n                y={y + 15}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                fontSize={graphType !== \"area\" ? \"12\" : \"5\"}\r\n                data-id={\r\n                  graphType !== \"area\" || i === 20 ? x : optionData[i].id\r\n                }\r\n                data-name={\r\n                  graphType === \"area\" && i < 20 ? optionData[i].area : \"\"\r\n                }\r\n                onClick={clickYearHandler}\r\n              >\r\n                {graphType !== \"area\" || i === 20 ? x : optionData[i].area}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nconst OverallGraph = ({ setYear, colorScale }) => {\r\n  const [population, setPopulation] = useState([]);\r\n  const [price, setPrice] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res_popu = await fetch(\"./data/population_test.json\");\r\n      const data_popu = await res_popu.json();\r\n      setPopulation(data_popu);\r\n\r\n      const res_price = await fetch(\"./data/price_test.json\");\r\n      const data_price = await res_price.json();\r\n      setPrice(data_price);\r\n    })();\r\n  }, []);\r\n  if (price.length === 0) {\r\n    return <div className=\"column is-5\">Loading...</div>;\r\n  }\r\n  const margin = {\r\n    top: 0,\r\n    bottom: 50,\r\n    left: 80,\r\n    right: 200,\r\n  };\r\n\r\n  const contentWidth = 400;\r\n  const contentHeight = 250;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  const xScaleYear = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(price, (item) => item[\"year\"]))\r\n    .range([0, contentWidth]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(population, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  const yScalePrice = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(price, (item) => item[\"price\"] / 10000)[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <div>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n        >\r\n          <HorizontalAxis\r\n            scale={xScaleYear}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            label=\"年\"\r\n            setData={setYear}\r\n            graphType={\"year\"}\r\n          />\r\n\r\n          <VerricalAxis\r\n            scale={yScalePrice}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            location=\"left\"\r\n            label=\"受け入れ額\"\r\n          />\r\n          <VerricalAxis\r\n            scale={yScalePopulation}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            location=\"right\"\r\n            label=\"人口\"\r\n          />\r\n          <g>\r\n            {price.map((item, i) => {\r\n              const x = xScaleYear(item[\"year\"]) + 20;\r\n              const y = yScalePrice(item[\"price\"] / 10000);\r\n\r\n              return (\r\n                <path\r\n                  key={item.id}\r\n                  d={`M ${x - 10} ${y}\r\n                       H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                      V ${y}\r\n                      `}\r\n                  stroke={colorScale(\"price\")}\r\n                  fill={colorScale(\"price\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g>\r\n            {population.map((item, i) => {\r\n              const preData = i > 0 ? population[i - 1] : null;\r\n\r\n              return (\r\n                <g key={item.id * 100}>\r\n                  {i > 0 && (\r\n                    <line\r\n                      key={item.id * 10}\r\n                      x1={xScaleYear(preData[\"year\"]) + 20}\r\n                      y1={yScalePopulation(preData.population)}\r\n                      x2={xScaleYear(item[\"year\"]) + 20}\r\n                      y2={yScalePopulation(item.population)}\r\n                      stroke={colorScale(\"population\")}\r\n                      strokeWidth={\"3\"}\r\n                    ></line>\r\n                  )}\r\n                  <circle\r\n                    key={item.id}\r\n                    cx={xScaleYear(item[\"year\"]) + 20}\r\n                    cy={yScalePopulation(item.population)}\r\n                    r=\"4\"\r\n                    fill={colorScale(\"population\")}\r\n                  ></circle>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default OverallGraph;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\n\r\nconst IndividualGraph = ({ setArea, year, colorScale }) => {\r\n  const [detailData, setDetailData] = useState([]);\r\n  const margin = {\r\n    top: 0,\r\n    bottom: 50,\r\n    left: 80,\r\n    right: 150,\r\n  };\r\n\r\n  const contentWidth = 500;\r\n  const contentHeight = 250;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    (async () => {\r\n      const data = {};\r\n      let ADYear = 2008;\r\n      for (let i = 20; i < 33; i++) {\r\n        const resYear = i <= 30 ? \"H\" + i : \"R\" + (i - 30);\r\n        const res = await fetch(`./data/${resYear}.json`);\r\n        const datum = await res.json();\r\n        console.log(datum);\r\n        data[ADYear] = datum;\r\n        ADYear++;\r\n      }\r\n      setDetailData(data);\r\n    })();\r\n  }, []);\r\n  if (detailData.length === 0) {\r\n    console.log(\"データの取得中\");\r\n    return <div></div>;\r\n  }\r\n  if (!year) {\r\n    console.log(\"年度が選択されていません\");\r\n    return <div className=\"column is-5\">Loading...</div>;\r\n  }\r\n  console.log(\"data detail\");\r\n  console.log(detailData);\r\n  const data = detailData[year].map((item) => {\r\n    return {\r\n      id: item.id,\r\n      area: item.area,\r\n    };\r\n  });\r\n  console.log(\"ojb\");\r\n  console.log(data);\r\n\r\n  const xScaleAreaName = d3\r\n    .scaleLinear()\r\n    .domain(\r\n      d3.extent([\r\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n      ])\r\n    )\r\n    .range([0, contentWidth]);\r\n  const yScalePrice = d3\r\n    .scaleLinear()\r\n    .domain([\r\n      0,\r\n      d3.extent(detailData[year], (item) => item[\"price\"] / 10000)[1],\r\n    ])\r\n    .range([contentHeight, 0]);\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(detailData[year], (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  if (Object.keys(detailData).length) {\r\n    return (\r\n      <div className=\"box\">\r\n        <div>\r\n          <svg\r\n            viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n            width={svgWidth}\r\n            height={svgHeight}\r\n          >\r\n            <VerricalAxis\r\n              scale={yScalePrice}\r\n              graphWidth={contentWidth}\r\n              graphHeight={contentHeight}\r\n              location=\"left\"\r\n              label=\"受け入れ金額\"\r\n            />\r\n            <HorizontalAxis\r\n              scale={xScaleAreaName}\r\n              graphWidth={contentWidth}\r\n              graphHeight={contentHeight}\r\n              label=\"市区町村\"\r\n              setData={setArea}\r\n              graphType=\"area\"\r\n              optionData={data}\r\n            />\r\n            <g>\r\n              {detailData[year].map((item, i) => {\r\n                const x = xScaleAreaName(i + 1) + 20;\r\n                const y = yScalePrice(item[\"price\"] / 10000);\r\n\r\n                return (\r\n                  <path\r\n                    key={item.id}\r\n                    d={`M ${x - 10} ${y}\r\n                   H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                  V ${y}\r\n                  `}\r\n                    fill={colorScale(\"price\")}\r\n                  />\r\n                );\r\n              })}\r\n            </g>\r\n            <g>\r\n              {detailData[year].map((item, i) => {\r\n                const preData = i > 0 ? detailData[year][i - 1] : null;\r\n                if (i > 0) {\r\n                  return (\r\n                    <g key={item.id * 100}>\r\n                      <line\r\n                        key={item.id * 10}\r\n                        x1={xScaleAreaName(i) + 20}\r\n                        y1={yScalePopulation(preData.population)}\r\n                        x2={xScaleAreaName(i + 1) + 20}\r\n                        y2={yScalePopulation(item.population)}\r\n                        stroke={colorScale(\"population\")}\r\n                      ></line>\r\n                      <circle\r\n                        key={item.id}\r\n                        cx={xScaleAreaName(i + 1) + 20}\r\n                        cy={yScalePopulation(item.population)}\r\n                        r=\"2\"\r\n                        fill={colorScale(\"population\")}\r\n                      ></circle>\r\n                    </g>\r\n                  );\r\n                }\r\n              })}\r\n            </g>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default IndividualGraph;\r\n","import JapanMap from \"./JapanMap\";\r\nimport OverallGraph from \"./OverallGraph\";\r\nimport { useState } from \"react\";\r\nimport IndividualGraph from \"./IndividualGraph\";\r\nimport * as d3 from \"d3\";\r\nconst Main = () => {\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  const [area, setArea] = useState(null);\r\n  const [year, setYear] = useState(null);\r\n  return (\r\n    <div className=\"columns is-multiline\" style={{ marginTop: \"10px\" }}>\r\n      <JapanMap currentArea={area} />\r\n      <div className=\"column is-6\">\r\n        <OverallGraph setYear={setYear} colorScale={colorScale} />\r\n        <IndividualGraph\r\n          setArea={setArea}\r\n          year={year}\r\n          colorScale={colorScale}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>Furu-Vis</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"bulma/css/bulma.css\";\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}