{"version":3,"sources":["components/Header.js","components/ZoomableSVG.js","components/JapanMap.js","components/Axis.js","components/OverallGraph.js","components/IndividualGraph.js","components/Main.js","components/Footer.js","App.js","index.js"],"names":["Header","className","ZoomableSVG","children","svgRef","width","height","useRef","useState","k","setK","x","setX","y","setY","useEffect","zoom","d3","on","event","transform","scaleExtent","current","call","ref","viewBox","JapanMap","currentArea","japanPath","setJapanPath","area","setArea","json","setJson","targetPoint","setTargetPoint","projection","center","translate","scale","a","fetch","res","data","topojson","objects","features","path","map","item","push","areaCode","properties","N03_007","target","JSON","parse","stringify","strArea","String","slice","length","filter","console","log","centerPoint","style","marginLeft","marginRight","i","d","stroke","strokeWidth","strokeOpacity","fill","cx","cy","r","VerricalAxis","graphHeight","label","strokeColor","range","y1","y2","deviceWidth","window","innerWidth","x1","x2","textAnchor","dominantBaseline","fontSize","ticks","HorizontalAxis","graphWidth","setData","graphType","optionData","tickCount","clickYearHandler","e","currentTarget","dataset","id","onClick","OverallGraph","setYear","population","setPopulation","price","setPrice","colorScale","res_popu","data_popu","res_price","data_price","margin","contentHeight","svgWidth","svgHeight","xScaleYear","domain","yScalePopulation","yScalePrice","preData","IndividualGraph","year","detailData","setDetailData","ADYear","resYear","datum","xScaleAreaName","yScale2019Price","Object","keys","marginTop","Main","Footer","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.a30032b5.chunk.js","sourcesContent":["const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"hero is-success\">\r\n        <div className=\"hero-body\">\r\n          <p className=\"title\">furu-vis</p>\r\n          <p className=\"subtitle\">furu-vis</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nfunction ZoomableSVG({ children, width, height }) {\r\n  const svgRef = useRef();\r\n  const [k, setK] = useState(1);\r\n  const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n  useEffect(() => {\r\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\r\n      const { x, y, k } = event.transform;\r\n      setK(k);\r\n      setX(x);\r\n      setY(y);\r\n    });\r\n    zoom.scaleExtent([0.5, 2]);\r\n    d3.select(svgRef.current).call(zoom);\r\n  }, []);\r\n\r\n  return (\r\n    // <svg\r\n    //   width={\"100%\"}\r\n    //   height={\"100%\"}\r\n    //   className=\"has-background-white\"\r\n    //   style={{\r\n    //     display: \"block\",\r\n    //     marginLeft: \"auto\",\r\n    //     marginRight: \"auto\",\r\n    //   }}\r\n    // >\r\n\r\n    <svg ref={svgRef} viewBox=\"-50 0 770 325\" width=\"800\" height=\"600\">\r\n      <g transform={`translate(${x}, ${y})scale(${k})`}>{children}</g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default ZoomableSVG;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ZoomableSVG from \"./ZoomableSVG\";\r\n\r\nconst JapanMap = ({ currentArea }) => {\r\n  const [japanPath, setJapanPath] = useState([]);\r\n  const [area, setArea] = useState(null);\r\n  const [json, setJson] = useState(null);\r\n  const [targetPoint, setTargetPoint] = useState([]);\r\n  const svgWidth = 500;\r\n  const svgHeight = 500;\r\n  const width = 630;\r\n  const height = 250;\r\n  const scale = 30000 * 0.7 * 0.08;\r\n  const east = 138.915833,\r\n    west = 139.796111,\r\n    north = 35.672778,\r\n    south = 35.128889;\r\n\r\n  const projection = d3\r\n    .geoMercator()\r\n    .center([(west + east) / 2 + -4, (north + south) / 2 + 1.8])\r\n    .translate([width / 2, height - 60])\r\n    .scale(scale);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await fetch(`./data/japan_simplify.topojson`);\r\n\r\n      const data = await res.json();\r\n      const features = await topojson.feature(\r\n        data,\r\n        data.objects[\"N03-21_210101-N03-21_210101\"]\r\n      );\r\n\r\n      const path = d3.geoPath().projection(projection);\r\n      const japanPath = [];\r\n      features.features.map((item) => {\r\n        japanPath.push({\r\n          path: path(item),\r\n          areaCode: item.properties.N03_007,\r\n        });\r\n      });\r\n\r\n      setJapanPath(japanPath);\r\n      setJson(features);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (json) {\r\n      const target = JSON.parse(JSON.stringify(json));\r\n      const strArea = String(currentArea).slice(0, -1);\r\n      target.features.length = 0;\r\n\r\n      target.features = json.features.filter(\r\n        (item) => item.properties.N03_007 == strArea\r\n      );\r\n      console.log(\"areaが更新されました\");\r\n      if (currentArea != null) {\r\n        console.log(currentArea);\r\n      }\r\n      const centerPoint = projection(d3.geoCentroid(target));\r\n      setTargetPoint(centerPoint);\r\n      setArea(currentArea);\r\n    }\r\n  }, [currentArea]);\r\n\r\n  if (!japanPath.length) {\r\n    return (\r\n      <div className=\"column is-5\">\r\n        <div className=\"box\">\r\n          <p>loading</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"column is-5\"\r\n      style={{ marginLeft: \"20px\", marginRight: \"10px\" }}\r\n    >\r\n      <div className=\"box\">\r\n        {/* <svg viewBox=\"-50 0 770 325\" width=\"500\" height=\"550\"> */}\r\n        <ZoomableSVG width={svgWidth} height={svgHeight}>\r\n          <g>\r\n            {japanPath.map((item, i) => (\r\n              <path\r\n                key={i}\r\n                d={item.path}\r\n                stroke=\"black\"\r\n                strokeWidth=\"0.8\"\r\n                strokeOpacity=\"0.5\"\r\n                style={{\r\n                  fill: area == item.areaCode ? \"red\" : \"white\",\r\n                }}\r\n              />\r\n            ))}\r\n          </g>\r\n          {targetPoint.length > 0 ? (\r\n            <g>\r\n              <circle\r\n                cx={targetPoint[0]}\r\n                cy={targetPoint[1]}\r\n                r=\"15\"\r\n                strokeWidth=\"4\"\r\n                fill=\"rgba(255,0,0,0)\"\r\n                stroke=\"red\"\r\n              ></circle>\r\n            </g>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ZoomableSVG>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default JapanMap;\r\n","import * as d3 from \"d3\";\r\n\r\nexport const VerricalAxis = ({ scale, graphHeight, label }) => {\r\n  const strokeColor = \"#888\";\r\n  const x = 0;\r\n  const [y1, y2] = scale.range();\r\n  const deviceWidth = window.innerWidth;\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(-80, ${graphHeight / 2}) rotate(-90)`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize={deviceWidth > 768 ? \"15\" : \"12\"}\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(0, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"-8\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\nexport const HorizontalAxis = ({\r\n  scale,\r\n  graphWidth,\r\n  graphHeight,\r\n  label,\r\n  setData,\r\n  graphType,\r\n  optionData,\r\n}) => {\r\n  const strokeColor = \"#888\";\r\n  const y = graphHeight;\r\n  const deviceWidth = window.innerWidth;\r\n  const tickCount = graphType === \"year\" ? 10 : 20;\r\n  const [x1, x2] = scale.range();\r\n  const clickYearHandler = (e) => {\r\n    setData(e.currentTarget.dataset.id);\r\n  };\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 25} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g transform={`translate(${graphWidth / 2}, ${y + 40})`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks(tickCount).map((x, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${scale(x) + 20}, 0)`}>\r\n              {/* <line\r\n                x1=\"0\"\r\n                y1={graphHeight}\r\n                x2=\"0\"\r\n                y2={graphHeight - 10}\r\n                stroke={strokeColor}\r\n              ></line> */}\r\n              <text\r\n                x=\"0\"\r\n                y={y + 15}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                fontSize={graphType !== \"area\" ? \"12\" : \"5\"}\r\n                data-id={\r\n                  graphType !== \"area\" || i === 20 ? x : optionData[i].id\r\n                }\r\n                onClick={clickYearHandler}\r\n              >\r\n                {graphType !== \"area\" || i === 20 ? x : optionData[i].area}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nconst OverallGraph = ({ setYear }) => {\r\n  const [population, setPopulation] = useState([]);\r\n  const [price, setPrice] = useState([]);\r\n\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res_popu = await fetch(\"./data/population_test.json\");\r\n      const data_popu = await res_popu.json();\r\n      setPopulation(data_popu);\r\n\r\n      const res_price = await fetch(\"./data/price_test.json\");\r\n      const data_price = await res_price.json();\r\n      setPrice(data_price);\r\n    })();\r\n  }, []);\r\n  if (price.length === 0) {\r\n    return <div className=\"column is-5\">Loading...</div>;\r\n  }\r\n  const margin = {\r\n    top: 0,\r\n    bottom: 50,\r\n    left: 200,\r\n    right: 50,\r\n  };\r\n\r\n  const contentWidth = 300;\r\n  const contentHeight = 250;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  const xScaleYear = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(price, (item) => item[\"year\"]))\r\n    .range([0, contentWidth]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(population, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  const yScalePrice = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(price, (item) => item[\"price\"])[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <div>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n        >\r\n          <HorizontalAxis\r\n            scale={xScaleYear}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            label=\"年\"\r\n            setData={setYear}\r\n            graphType={\"year\"}\r\n          />\r\n\r\n          <VerricalAxis\r\n            scale={yScalePrice}\r\n            graphHeight={contentHeight}\r\n            label={\"受け入れ額\"}\r\n          />\r\n\r\n          <g>\r\n            {price.map((item, i) => {\r\n              const x = xScaleYear(item[\"year\"]) + 20;\r\n              const y = yScalePrice(item[\"price\"]);\r\n\r\n              return (\r\n                <path\r\n                  key={item.id}\r\n                  d={`M ${x - 10} ${y}\r\n                       H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                      V ${y}\r\n                      `}\r\n                  stroke={colorScale(\"price\")}\r\n                  fill={colorScale(\"price\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g>\r\n            {population.map((item, i) => {\r\n              const preData = i > 0 ? population[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <g key={item.id * 100}>\r\n                    <line\r\n                      key={item.id * 10}\r\n                      x1={xScaleYear(preData[\"year\"])}\r\n                      y1={yScalePopulation(preData.population)}\r\n                      x2={xScaleYear(item[\"year\"])}\r\n                      y2={yScalePopulation(item.population)}\r\n                      stroke={colorScale(\"population\")}\r\n                    ></line>\r\n                    <circle\r\n                      key={item.id}\r\n                      cx={xScaleYear(item[\"year\"])}\r\n                      cy={yScalePopulation(item.population)}\r\n                      r=\"2\"\r\n                      fill={colorScale(\"population\")}\r\n                    ></circle>\r\n                  </g>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default OverallGraph;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\n\r\nconst IndividualGraph = ({ setArea, year }) => {\r\n  const [detailData, setDetailData] = useState([]);\r\n  const margin = {\r\n    top: 0,\r\n    bottom: 50,\r\n    left: 200,\r\n    right: 50,\r\n  };\r\n\r\n  const contentWidth = 500;\r\n  const contentHeight = 250;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    (async () => {\r\n      const data = {};\r\n      let ADYear = 2008;\r\n      for (let i = 20; i < 33; i++) {\r\n        const resYear = i <= 30 ? \"H\" + i : \"R\" + (i - 30);\r\n        const res = await fetch(`./data/${resYear}.json`);\r\n        const datum = await res.json();\r\n        console.log(datum);\r\n        data[ADYear] = datum;\r\n        ADYear++;\r\n      }\r\n      setDetailData(data);\r\n    })();\r\n  }, []);\r\n  if (detailData.length === 0) {\r\n    console.log(\"データの取得中\");\r\n    return <div></div>;\r\n  }\r\n  if (!year) {\r\n    console.log(\"年度が選択されていません\");\r\n    return <div className=\"column is-5\">Loading...</div>;\r\n  }\r\n  console.log(\"data detail\");\r\n  console.log(detailData);\r\n  const data = detailData[year].map((item) => {\r\n    return {\r\n      id: item.id,\r\n      area: item.area,\r\n    };\r\n  });\r\n  console.log(\"ojb\");\r\n  console.log(data);\r\n\r\n  const xScaleAreaName = d3\r\n    .scaleLinear()\r\n    .domain(\r\n      d3.extent([\r\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n      ])\r\n    )\r\n    .range([contentWidth, 0]);\r\n  const yScale2019Price = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(detailData[year], (item) => item[\"price\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(detailData[year], (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  if (Object.keys(detailData).length) {\r\n    return (\r\n      <div className=\"box\" style={{ marginTop: \"0\" }}>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n        >\r\n          <g>\r\n            {detailData[year].map((item, i) => {\r\n              const x = xScaleAreaName(i);\r\n              const y = yScale2019Price(item[\"price\"]);\r\n\r\n              return (\r\n                <path\r\n                  key={item.id}\r\n                  d={`M ${x - 10} ${y}\r\n                   H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                  V ${y}\r\n                  `}\r\n                  // stroke={colorScale(\"price\")}\r\n                  // fill={colorScale(\"price\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n          <g>\r\n            {detailData[year].map((item, i) => {\r\n              const preData = i > 0 ? detailData[year][i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <g key={item.id * 100}>\r\n                    <line\r\n                      key={item.id * 10}\r\n                      x1={xScaleAreaName(i - 1)}\r\n                      y1={yScalePopulation(preData.population)}\r\n                      x2={xScaleAreaName(i)}\r\n                      y2={yScalePopulation(item.population)}\r\n                      stroke=\"black\"\r\n                    ></line>\r\n                    <circle\r\n                      key={item.id}\r\n                      cx={xScaleAreaName(item[\"year\"])}\r\n                      cy={yScalePopulation(item.population)}\r\n                      r=\"2\"\r\n                      fill=\"black\"\r\n                    ></circle>\r\n                  </g>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <VerricalAxis\r\n            scale={yScale2019Price}\r\n            graphHeight={contentHeight}\r\n            label=\"受け入れ金額\"\r\n          />\r\n          <HorizontalAxis\r\n            scale={xScaleAreaName}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            label=\"市区町村\"\r\n            setData={setArea}\r\n            graphType=\"area\"\r\n            optionData={data}\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default IndividualGraph;\r\n","import JapanMap from \"./JapanMap\";\r\nimport OverallGraph from \"./OverallGraph\";\r\nimport { useEffect, useState } from \"react\";\r\nimport IndividualGraph from \"./IndividualGraph\";\r\nconst Main = () => {\r\n  const [area, setArea] = useState(null);\r\n  const [year, setYear] = useState(null);\r\n  return (\r\n    <div className=\"columns is-multiline\" style={{ marginTop: \"10px\" }}>\r\n      <JapanMap currentArea={area} />\r\n      <div className=\"column is-6\">\r\n        <OverallGraph setYear={setYear} />\r\n        <IndividualGraph setArea={setArea} year={year} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>Furu-Vis</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"bulma/css/bulma.css\";\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}