{"version":3,"sources":["components/Header.js","components/ZoomableSVG.js","components/JapanMap.js","components/Axis.js","components/Legend.js","components/OverallGraph.js","components/IndividualGraph.js","components/Main.js","components/Footer.js","App.js","index.js"],"names":["Header","className","ZoomableSVG","children","svgRef","width","height","useRef","useState","k","setK","x","setX","y","setY","useEffect","zoom","d3","on","event","transform","scaleExtent","current","call","ref","viewBox","JapanMap","currentArea","japanPath","setJapanPath","setArea","json","setJson","targetPoint","setTargetPoint","projection","center","translate","scale","a","fetch","res","data","topojson","objects","features","path","map","item","push","areaCode","properties","N03_007","target","JSON","parse","stringify","strArea","String","id","slice","length","filter","area","N03_003","centerPoint","style","marginLeft","marginRight","i","d","stroke","strokeWidth","strokeOpacity","fill","cx","cy","r","VerricalAxis","graphWidth","graphHeight","location","graphName","label","strokeColor","range","y1","y2","deviceWidth","window","innerWidth","gradationsY","labelLocation","x1","x2","dominantBaseline","fontSize","textAnchor","ticks","HorizontalAxis","setData","graphType","optionData","tickCount","hoveredYear","setHoveredYear","clickYearHandler","e","currentTarget","dataset","name","mouseOverHandler","Number","cursor","textDecorationLine","onClick","onMouseOver","Legend","domain","OverallGraph","setYear","colorScale","population","setPopulation","price","setPrice","margin","contentWidth","contentHeight","svgWidth","svgHeight","res_popu","data_popu","res_price","data_price","xScaleYear","yScalePopulation","yScalePrice","marginBottom","paddingBottom","preData","IndividualGraph","year","detailData","setDetailData","ADYear","resYear","datum","xScaleAreaName","Object","keys","marginTop","paddingLeft","paddingTop","Main","Footer","href","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.aeb279af.chunk.js","sourcesContent":["const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"hero is-small is-success\">\r\n        <div className=\"hero-body\">\r\n          <p className=\"title\">Furu-vis</p>\r\n          <p className=\"subtitle\">~ふるさと納税どこが多いの？~</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nfunction ZoomableSVG({ children, width, height }) {\r\n  const svgRef = useRef();\r\n  const [k, setK] = useState(1);\r\n  const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n  useEffect(() => {\r\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\r\n      const { x, y, k } = event.transform;\r\n      setK(k);\r\n      setX(x);\r\n      setY(y);\r\n    });\r\n    zoom.scaleExtent([0.5, 2]);\r\n    d3.select(svgRef.current).call(zoom);\r\n  }, []);\r\n\r\n  return (\r\n    <svg ref={svgRef} viewBox=\"-50 0 770 325\" width=\"500\" height=\"600\">\r\n      <g transform={`translate(${x}, ${y})scale(${k})`}>{children}</g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default ZoomableSVG;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ZoomableSVG from \"./ZoomableSVG\";\r\n\r\nconst JapanMap = ({ currentArea }) => {\r\n  const [japanPath, setJapanPath] = useState([]);\r\n  const [area, setArea] = useState(null);\r\n  const [json, setJson] = useState(null);\r\n  const [targetPoint, setTargetPoint] = useState([]);\r\n  const svgWidth = 200;\r\n  const svgHeight = 500;\r\n  const width = 630;\r\n  const height = 250;\r\n  const scale = 30000 * 0.7 * 0.1;\r\n  const east = 138.915833,\r\n    west = 139.796111,\r\n    north = 35.672778,\r\n    south = 35.128889;\r\n\r\n  const projection = d3\r\n    .geoMercator()\r\n    .center([(west + east) / 2 - 0.5, (north + south) / 2 + 1.8])\r\n    .translate([width / 2, height - 60])\r\n    .scale(scale);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await fetch(`./data/japan_simplify.topojson`);\r\n      const data = await res.json();\r\n      const features = await topojson.feature(\r\n        data,\r\n        data.objects[\"N03-21_210101-N03-21_210101\"]\r\n      );\r\n\r\n      const path = d3.geoPath().projection(projection);\r\n      const japanPath = [];\r\n      features.features.map((item) => {\r\n        japanPath.push({\r\n          path: path(item),\r\n          areaCode: item.properties.N03_007,\r\n        });\r\n      });\r\n\r\n      setJapanPath(japanPath);\r\n      setJson(features);\r\n    })();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (json) {\r\n      const target = JSON.parse(JSON.stringify(json));\r\n      const strArea = String(currentArea.id).slice(0, -1);\r\n      target.features.length = 0;\r\n      target.features = json.features.filter((item) => {\r\n        if (currentArea.area === item.properties.N03_003) {\r\n          return true;\r\n        } else if (String(item.properties.N03_007) === strArea) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      const centerPoint = projection(d3.geoCentroid(target));\r\n      setTargetPoint(centerPoint);\r\n      setArea(strArea);\r\n    }\r\n  }, [currentArea]);\r\n\r\n  if (!japanPath.length) {\r\n    return (\r\n      <div className=\"column is-5\">\r\n        <div className=\"box\" style={{ height: \"500px\" }}>\r\n          <p>日本地図を描画中...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"column is-5\">\r\n      <div className=\"box\" style={{ marginLeft: \"20px\", marginRight: \"0\" }}>\r\n        <ZoomableSVG width={svgWidth} height={svgHeight}>\r\n          <g>\r\n            {japanPath.map((item, i) => (\r\n              <path\r\n                key={i}\r\n                d={item.path}\r\n                stroke=\"black\"\r\n                strokeWidth=\"0.8\"\r\n                strokeOpacity=\"0.5\"\r\n                style={{\r\n                  fill: \"white\",\r\n                }}\r\n              />\r\n            ))}\r\n          </g>\r\n          {targetPoint.length > 0 ? (\r\n            <g>\r\n              <circle\r\n                cx={targetPoint[0]}\r\n                cy={targetPoint[1]}\r\n                r=\"15\"\r\n                strokeWidth=\"4\"\r\n                fill=\"rgba(255,0,0,0)\"\r\n                stroke=\"red\"\r\n              ></circle>\r\n            </g>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ZoomableSVG>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default JapanMap;\r\n","import { useState } from \"react\";\r\nexport const VerricalAxis = ({\r\n  scale,\r\n  graphWidth,\r\n  graphHeight,\r\n  location,\r\n  graphName,\r\n  label,\r\n}) => {\r\n  const strokeColor = \"#888\";\r\n  const x = location === \"left\" ? 0 : graphWidth + 40;\r\n  const [y1, y2] = scale.range();\r\n  const deviceWidth = window.innerWidth;\r\n  let gradationsY = 0;\r\n  let labelLocation = 0;\r\n  if (location === \"left\") {\r\n    gradationsY = -8;\r\n  } else if (graphName === \"overall\") {\r\n    gradationsY = 50;\r\n  } else {\r\n    gradationsY = 50;\r\n  }\r\n\r\n  if (location === \"left\") {\r\n    if (graphName === \"overall\") {\r\n      labelLocation = -80;\r\n    } else {\r\n      labelLocation = -50;\r\n    }\r\n  } else {\r\n    labelLocation = graphWidth + 105;\r\n  }\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g\r\n          transform={`translate(${labelLocation}, ${graphHeight / 2}) rotate(${\r\n            location === \"left\" ? -90 : 90\r\n          })`}\r\n        >\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            dominantBaseline=\"central\"\r\n            fontSize={deviceWidth > 768 ? \"15\" : \"12\"}\r\n            textAnchor=\"middle\"\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n        <g>\r\n          <text\r\n            transform={`translate(${\r\n              graphName === \"individual\" ? -40 : -60\r\n            },20)`}\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"start\"\r\n            fontSize=\"10\"\r\n          >\r\n            万\r\n          </text>\r\n        </g>\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${scale(y)})`}>\r\n              <line\r\n                x1=\"0\"\r\n                y1=\"0\"\r\n                x2={location === \"left\" ? 5 : -5}\r\n                y2=\"0\"\r\n                stroke={strokeColor}\r\n              ></line>\r\n              <text\r\n                x={gradationsY}\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {location === \"left\" ? y : y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\nexport const HorizontalAxis = ({\r\n  scale,\r\n  graphWidth,\r\n  graphHeight,\r\n  label,\r\n  setData,\r\n  graphType,\r\n  optionData,\r\n}) => {\r\n  const strokeColor = \"#888\";\r\n  const y = graphHeight;\r\n  const tickCount = graphType === \"year\" ? 10 : 20;\r\n  const [x1, x2] = scale.range();\r\n  const [hoveredYear, setHoveredYear] = useState(null);\r\n  const clickYearHandler = (e) => {\r\n    if (graphType === \"year\") {\r\n      setData(e.currentTarget.dataset.id);\r\n    } else {\r\n      setData({\r\n        id: e.currentTarget.dataset.id,\r\n        area: e.currentTarget.dataset.name,\r\n      });\r\n    }\r\n  };\r\n  const mouseOverHandler = (e) => {\r\n    setHoveredYear(Number(e.currentTarget.dataset.id));\r\n  };\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 40} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g\r\n          transform={`translate(${graphWidth / 2}, ${\r\n            y + (graphType === \"area\" ? 48 : 40)\r\n          })`}\r\n        >\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            {label}\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks(tickCount).map((x, i) => {\r\n          const id = graphType !== \"area\" ? x : optionData[i].id;\r\n\r\n          return (\r\n            <g\r\n              key={i}\r\n              transform={`translate(${scale(x) + 20}, ${\r\n                y + (graphType === \"area\" ? 7 : 15)\r\n              })`}\r\n            >\r\n              <text\r\n                x=\"0\"\r\n                y=\"0\"\r\n                dominantBaseline=\"central\"\r\n                fontSize={graphType !== \"area\" ? \"12\" : \"10\"}\r\n                transform={graphType === \"area\" ? \"rotate(45)\" : \"\"}\r\n                textAnchor={graphType === \"area\" ? \"start\" : \"middle\"}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  textDecorationLine: id == hoveredYear ? \"overline\" : \"none\",\r\n                }}\r\n                data-id={id}\r\n                data-name={graphType === \"area\" ? optionData[i].area : \"\"}\r\n                onClick={clickYearHandler}\r\n                onMouseOver={mouseOverHandler}\r\n              >\r\n                {graphType !== \"area\" ? x : optionData[i].area}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","function Legend({ scale, graphWidth }) {\r\n  return (\r\n    <g transform=\"translate(200,0)\">\r\n      {scale.domain().map((item, i) => {\r\n        return (\r\n          <g\r\n            key={i}\r\n            transform={`translate(${graphWidth - 80}, ${20 + i * 15})`}\r\n          >\r\n            <circle r=\"5\" fill={scale(item)} />\r\n            <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n              {item}\r\n            </text>\r\n          </g>\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n}\r\nexport default Legend;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nimport Legend from \"./Legend\";\r\nconst OverallGraph = ({ setYear, colorScale }) => {\r\n  const [population, setPopulation] = useState([]);\r\n  const [price, setPrice] = useState([]);\r\n\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 50,\r\n    left: 100,\r\n    right: 200,\r\n  };\r\n\r\n  const contentWidth = 400;\r\n  const contentHeight = 300;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res_popu = await fetch(\"./data/population.json\");\r\n      const data_popu = await res_popu.json();\r\n      setPopulation(data_popu);\r\n\r\n      const res_price = await fetch(\"./data/price_all.json\");\r\n      const data_price = await res_price.json();\r\n      setPrice(data_price);\r\n    })();\r\n  }, []);\r\n  if (price.length === 0) {\r\n    return (\r\n      <div className=\"box\" style={{ width: svgWidth, height: \"200px\" }}>\r\n        読み込み中...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const xScaleYear = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(price, (item) => item[\"year\"]))\r\n    .range([0, contentWidth]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(population, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  const yScalePrice = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(price, (item) => item[\"price\"] / 10000)[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  return (\r\n    <div\r\n      className=\"box\"\r\n      style={{ marginRight: \"20px\", marginBottom: \"5px\", paddingBottom: \"0\" }}\r\n    >\r\n      <div>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n        >\r\n          <HorizontalAxis\r\n            scale={xScaleYear}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            label=\"年\"\r\n            setData={setYear}\r\n            graphType={\"year\"}\r\n          />\r\n\r\n          <VerricalAxis\r\n            scale={yScalePrice}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            graphName={`overall`}\r\n            location=\"left\"\r\n            label=\"受け入れ額\"\r\n          />\r\n          <VerricalAxis\r\n            scale={yScalePopulation}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n            graphName={`overall`}\r\n            location=\"right\"\r\n            label=\"人口\"\r\n          />\r\n          <Legend scale={colorScale} graphWidth={contentWidth} />\r\n          <g>\r\n            {price.map((item, i) => {\r\n              const x = xScaleYear(item[\"year\"]) + 20;\r\n              const y = yScalePrice(item[\"price\"] / 10000);\r\n              return (\r\n                <path\r\n                  key={item.id}\r\n                  d={`M ${x - 10} ${y}\r\n                       H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                      V ${y}\r\n                      `}\r\n                  stroke={colorScale(\"受け入れ額\")}\r\n                  fill={colorScale(\"受け入れ額\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          <g>\r\n            {population.map((item, i) => {\r\n              const preData = i > 0 ? population[i - 1] : null;\r\n              return (\r\n                <g key={item.id * 100}>\r\n                  {i > 0 && (\r\n                    <line\r\n                      key={item.id * 10}\r\n                      x1={xScaleYear(preData[\"year\"]) + 20}\r\n                      y1={yScalePopulation(preData.population)}\r\n                      x2={xScaleYear(item[\"year\"]) + 20}\r\n                      y2={yScalePopulation(item.population)}\r\n                      stroke={colorScale(\"人口\")}\r\n                      strokeWidth=\"3\"\r\n                    ></line>\r\n                  )}\r\n                  <circle\r\n                    key={item.id}\r\n                    cx={xScaleYear(item[\"year\"]) + 20}\r\n                    cy={yScalePopulation(item.population)}\r\n                    r=\"4\"\r\n                    fill={colorScale(\"人口\")}\r\n                  ></circle>\r\n                </g>\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default OverallGraph;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nimport Legend from \"./Legend\";\r\n\r\nconst IndividualGraph = ({ setArea, year, colorScale }) => {\r\n  const [detailData, setDetailData] = useState([]);\r\n  const margin = {\r\n    top: 20,\r\n    bottom: 55,\r\n    left: 60,\r\n    right: 200,\r\n  };\r\n  const contentWidth = 500;\r\n  const contentHeight = 250;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const data = {};\r\n      let ADYear = 2008;\r\n      for (let i = 20; i < 33; i++) {\r\n        const resYear = i <= 30 ? \"H\" + i : \"R\" + (i - 30);\r\n        const res = await fetch(`./data/${resYear}.json`);\r\n        const datum = await res.json();\r\n        data[ADYear] = datum;\r\n        ADYear++;\r\n      }\r\n      setDetailData(data);\r\n    })();\r\n  }, []);\r\n  if (detailData.length === 0) {\r\n    return (\r\n      <div className=\"box\" style={{ width: svgWidth, height: \"100px\" }}>\r\n        読み込み中...\r\n      </div>\r\n    );\r\n  }\r\n  if (!year) {\r\n    return (\r\n      <div className=\"box\" style={{ width: svgWidth }}>\r\n        上のグラフから年を選択してください。\r\n      </div>\r\n    );\r\n  }\r\n  const data = detailData[year].map((item) => {\r\n    return {\r\n      id: item.id,\r\n      area: item.area,\r\n    };\r\n  });\r\n\r\n  const xScaleAreaName = d3\r\n    .scaleLinear()\r\n    .domain(\r\n      d3.extent([\r\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n      ])\r\n    )\r\n    .range([0, contentWidth]);\r\n  const yScalePrice = d3\r\n    .scaleLinear()\r\n    .domain([\r\n      0,\r\n      d3.extent(detailData[year], (item) => item[\"price\"] / 10000)[1],\r\n    ])\r\n    .range([contentHeight, 0]);\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(detailData[year], (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  if (Object.keys(detailData).length) {\r\n    return (\r\n      <div\r\n        className=\"box\"\r\n        style={{\r\n          marginRight: \"20px\",\r\n          marginTop: \"5px\",\r\n          paddingLeft: \"5px\",\r\n          paddingTop: \"5px\",\r\n        }}\r\n      >\r\n        <div>\r\n          <p style={{ paddingLeft: \"20px\", paddingBottom: \"10px\" }}>\r\n            {year !== null ? year : \"\"}年\r\n          </p>\r\n          <svg\r\n            viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n            width={svgWidth}\r\n            height={svgHeight}\r\n          >\r\n            <VerricalAxis\r\n              scale={yScalePrice}\r\n              graphWidth={contentWidth}\r\n              graphHeight={contentHeight}\r\n              graphName={`individual`}\r\n              location=\"left\"\r\n              label=\"受け入れ金額\"\r\n            />\r\n            <VerricalAxis\r\n              scale={yScalePopulation}\r\n              graphWidth={contentWidth}\r\n              graphHeight={contentHeight}\r\n              graphName={`individual`}\r\n              location=\"right\"\r\n              label=\"人口\"\r\n            />\r\n            <HorizontalAxis\r\n              scale={xScaleAreaName}\r\n              graphWidth={contentWidth}\r\n              graphHeight={contentHeight}\r\n              label=\"市区町村\"\r\n              setData={setArea}\r\n              graphType=\"area\"\r\n              optionData={data}\r\n            />\r\n            <Legend scale={colorScale} graphWidth={contentWidth} />\r\n            <g>\r\n              {detailData[year].map((item, i) => {\r\n                const x = xScaleAreaName(i + 1) + 20;\r\n                const y = yScalePrice(item[\"price\"] / 10000);\r\n\r\n                return (\r\n                  <path\r\n                    key={item.id}\r\n                    d={`M ${x - 10} ${y}\r\n                   H ${x + 10} V ${contentHeight} H ${x - 10} \r\n                  V ${y}\r\n                  `}\r\n                    fill={colorScale(\"受け入れ額\")}\r\n                  />\r\n                );\r\n              })}\r\n            </g>\r\n            <g>\r\n              {detailData[year].map((item, i) => {\r\n                const preData = i > 0 ? detailData[year][i - 1] : null;\r\n                if (i > 0) {\r\n                  return (\r\n                    <g key={item.id * 100}>\r\n                      <line\r\n                        key={item.id * 10}\r\n                        x1={xScaleAreaName(i) + 20}\r\n                        y1={yScalePopulation(preData.population)}\r\n                        x2={xScaleAreaName(i + 1) + 20}\r\n                        y2={yScalePopulation(item.population)}\r\n                        stroke={colorScale(\"人口\")}\r\n                        strokeWidth=\"3\"\r\n                      ></line>\r\n                      <circle\r\n                        key={item.id}\r\n                        cx={xScaleAreaName(i + 1) + 20}\r\n                        cy={yScalePopulation(item.population)}\r\n                        r=\"4\"\r\n                        fill={colorScale(\"人口\")}\r\n                      ></circle>\r\n                    </g>\r\n                  );\r\n                }\r\n              })}\r\n            </g>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default IndividualGraph;\r\n","import JapanMap from \"./JapanMap\";\r\nimport OverallGraph from \"./OverallGraph\";\r\nimport { useState } from \"react\";\r\nimport IndividualGraph from \"./IndividualGraph\";\r\nimport * as d3 from \"d3\";\r\nconst Main = () => {\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  const FIRST_YEAR = 2008;\r\n  const [area, setArea] = useState(null);\r\n  const [year, setYear] = useState(FIRST_YEAR);\r\n  return (\r\n    <div className=\"columns is-multiline\" style={{ marginTop: \"10px\" }}>\r\n      <JapanMap currentArea={area} />\r\n      <div className=\"column is-7\">\r\n        <OverallGraph setYear={setYear} colorScale={colorScale} />\r\n        <IndividualGraph\r\n          setArea={setArea}\r\n          year={year}\r\n          colorScale={colorScale}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>\r\n          このサイトは\r\n          <a\r\n            href=\"https://www.soumu.go.jp/main_sosiki/jichi_zeisei/czaisei/czaisei_seido/080430_2_kojin.html\"\r\n            target=\"_blank\"\r\n          >\r\n            総務省\r\n          </a>\r\n          からデータを持ってきています\r\n          <br />\r\n          -team-Sashimi-\r\n        </p>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"bulma/css/bulma.css\";\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}